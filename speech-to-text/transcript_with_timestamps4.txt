Timestamp: 0.0, Caption: get into the class and then comparing the output with the expected output there's a lot of ways you can probably do this you can even use like a unit testing framework probably but I tried to keep things as simple as possible so I actually wrote a driver code file for every single problem and I took the user's code and actually concatenated it to the driver code file so that everything would be in a single file and then I could just take that one file and then send it over to judge zero and then execute the driver could file specifically parses the test input based on that it chooses which method to run of the class in which parameters to pass it and then it takes the output and puts it into a consistent format because I didn't want to define a specific output for every single language for example some languages print are raised differently summer language don't even let you print a raise so that's kind of the responsibility of the driver code now when it comes to sending this to judge zero you can send it in a single submission or you can send a batch submission you would think we would want to do
Timestamp: 59.900, Caption: batch submission meaning one submission for every single test case programming that is actually a bit more straightforward but the problem that I ran into is that that massively increases the latency and it makes sense why that is because as we talked about earlier when we're executing Java code most of the latency comes from compiling the code and probably starting up the jvm and all that so we have to do that like a dozen times one for each test case it's going to slow our code down a lot but if we only have to do it a single time meaning compiling the code and starting it up and then we can just run every single test case and compare each of those with the expected output that's going to be a lot faster now the one issue with this is at least the way I coded it up each test case output is printed onto a single line so if you as a user have some like log statements in your code as of right now you're not going to be able to see them while you might see them but it's going to mess up the rest of the test cases but I already know
Timestamp: 119.900, Caption: exactly how to fix that it's just something I'm going to have to do and that actually brings me to another limitation we're right now you as a user can submit your own custom test case the reason for this is for all of the test cases I created I already have the expected output but if you give me a custom test case I don't necessarily know what the expected output is going to be so what I have to do is take my solution code or some solution code run it against your custom test case and run your code against that custom test case and then compare the difference if the output is the same than your code passes be custom test case this is again not like complicated to code up it's just another thing that you have to actually do it even though I said that this whole thing was easier to do than I expected it still is a lot of work as a lot of like features as a lot of edge cases and things to do but now that I've pretty much laid the entire Foundation of this the possibilities are Limitless like I have a dozen ideas of things that I want to start working on now if you're wondering how
Timestamp: 179.900, Caption: I did all of this so quickly well I had a lot of support from my manager the p.m. the dev team that I work with his really good the CEO likes me the joke is that I'm all of those people cuz I did all this myself but I am getting to the point where I probably do need help the biggest shortcut I probably took and don't tell your Tech lead I told you this but I actually didn't write unit tests at least in my case I think it's a waste of time because I already know like the entire code base I think a lot of times unit test sort of serve as documentation for new Debs and in my case if I update like a certain piece of code I already know all of the other pieces of code that might be affected so I can quickly just manually test that everything still works and even when there is a bug which is pretty rare in my case in those cases it's not something a unit test would usually catches usually like a race condition or something like that now if you're thinking wait a minute I thought you just sat in your basement and solve leetcode problems all day but yes that's true I try to upload leetcode problems regularly on my second
Timestamp: 239.800, Caption: Channel but maybe just maybe there is some correlation with being good at solving leetcode problems especially leetcode hard and being a good developer or at least being able to become a good developer like I see people on Twitter complaining about next js13 oh no the app router it's so complicated guys like I've been doing angular and I'm not saying that like it's a good thing but I'm just saying that maybe being a real Dev isn't as hard as people make it out to be
